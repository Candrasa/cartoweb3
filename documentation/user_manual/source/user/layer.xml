<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % cartoweb SYSTEM "../cartoweb.ent" >
  %cartoweb;
]>

<!-- $Id$ -->

<chapter id="user.layer">
 <title>Layers</title>

 <sect1 id="user.layer.intro"> 
  <title>Introduction</title>
  <para>
   This document describes the layer configuration and rendering
   on the cartoserver.
  </para>
 </sect1>

 <sect1 id="user.layer.mapfile">
  <title>MapFile layers configuration</title>
  <para>
  </para>
 </sect1>

 <sect1 id="user.layer.tree"> 
  <title>Layer hierachical tree</title>
  <para>
   Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla
   Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla
   Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla
  </para>
 </sect1>

 <sect1 id="user.layer.metadata"> 
  <title>Metadata in mapfiles and .ini file</title>
  <para>FIXME: is is the right place ?
  </para>
  <para>
   Metadata are (keyword, value) pairs which can be associated to a MapServer
   layer in the mapfile, or to a Layer or LayerGroup in the .ini configuration
   file. These metadata are used in several different contextes, such as layer
   specific configuration, security handling, ...
  </para>
  <sect2 id="user.layer.metadata.mapfile"> 
    <title>Metadata in mapfiles</title>
    <para>
    Specifying metadata in mapfiles is based on the standard MapServer syntax.
    For instance:
    <programlisting>
  LAYER 
    NAME "my_layer"
    [...]
    METADATA
    "exported_values" "security_view,security_edit"
    "security_view" "admin"
    "security_edit" "admin,editors"
    
      "id_attribute_string" "FID|string"
      "mask_transparency" "50"
      "mask_color" "255, 255, 0"
      "area_fixed_value" "10"
    END 
    [...]
  END    
    </programlisting>
    The metadata key <constant>exported_values</constant> is a bit special: It gives
    the list of metadata keys (coma separated), which will be transmitted to the 
    client. This is required for the metadata keys describing layer security for 
    instance, as they are used on the &cartoclient;.
    </para>
    </sect2>
  <sect2 id="user.layer.metadata.inifile"> 
    <title>Metadata in <filename>&lt;mapfile&gt;.ini</filename></title>
    <para>
     The .ini configuration file <filename>&lt;mapfile&gt;.ini</filename> may contains
     metadata (key, value) pairs, in addition to the mapfile. This is needed for 
     LayerGroup objects, as they have no counter part in the mapfile. For the layer
     metadata, the metadata specified in the [FIXME:add] have precendence over the 
     values from [FIXME:add].
    </para>
    <para>
      For each layer object in the .ini file, they may contains the following attribute:
   <itemizedlist>
    <listitem>
     <para>
    metadata.METADATA: a list of metadata which will be made available to the client. 
    These can also be set in the mapfile, for the layers. 
    Now this is used by the layers security mechanism
     </para>
    </listitem>      
    </itemizedlist>
      For instance:
      <programlisting>
mapInfo.layers.group_admin.className = LayerGroup
mapInfo.layers.group_admin.children = grid_defaulthilight
mapInfo.layers.group_admin.metadata.security_view = admin        
     </programlisting>
    </para>
  </sect2>
 </sect1>

 <sect1 id="user.layer.initial">
  <title>Initial map states</title>
  <para>
   Initial Map States are defined in the same file than layers 
   (<filename>&lt;mapfile&gt;.ini</filename>). They set the initial aspects
   of layers selection interface when starting using CartoClient : (un)folded 
   nodes, selected layers... Some of these properties are not modifiable in 
   the layers selection interface (hidden layers for instance) and thus stay
   unchanged throughout the browsing.
  </para>
  <para>
   In the same configuration file, several initial map states can be created.
   The choice to activate one or another is done client-side in 
   <filename>client_conf/client.ini</filename> :
  </para>
  <para>
   in &lt;mapfile&gt;.ini
   <programlisting><![CDATA[mapInfo.initialMapStates.default.layers.polygon.selected = true
;mapInfo.initialMapStates.default.layers.polygon.unfolded = true 
;this line is commented
mapInfo.initialMapStates.default.layers.polygon.hidden = true
...

mapInfo.initialMapStates.map25.layers.polygon.selected = true
mapInfo.initialMapStates.map25.layers.polygon.unfolded = true]]></programlisting>
  </para>
  <para>
   in client.ini
   <programlisting><![CDATA[initialMapStateId = default
#initialMapStateId = map25]]></programlisting>
   => "default" initial map state is activated
  </para>
  <para>
   Available properties (mainly booleans that default to false) for 
   layers in "initial map states" are:
   <itemizedlist>
    <listitem>
     <para>
      hidden: if true, this layer and its children are not shown in the 
      layers list but are still displayed on the map if their are activated
     </para>
    </listitem>
    <listitem>
     <para>
      selected: if true, layer is initially selected.
     </para>
    </listitem>
    <listitem>
     <para>
      unfolded: if true, layerGroup is represented as an unfolded 
      node (children layers appear).
     </para>
    </listitem>
    <listitem>
     <para>
      frozen: if true, this layer (and its children as well) is displayed
      in tree but with no checkbox. Its selection status (defined by 
      "selected" property) thus cannot be changed.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect1>

 <sect1 id="user.layer.legend">
  <title>Layers legend</title>
  <para>
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
  </para>
 </sect1>

</chapter>
