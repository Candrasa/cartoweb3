<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % cartoweb SYSTEM "../cartoweb.ent" >
  %cartoweb;
  ]>
<!-- $Id$ -->
<chapter id="user.i18n">
  <title>Internationalization</title>
  <sect1 id="user.i18n.translations">
    <title>Translations</title>
    <para> Tanslation handling in &cartoweb; was designed to use <ulink 
      url="http://www.gnu.org/software/gettext/manual">gettext</ulink>. However 
      internationalization architecture is ready for other translation 
      systems.</para>
    <sect2 id="user.i18n.translations.config">
      <title>Configuration</title>
      <para> For now only gettext translation system is implemented. If gettext 
        is not installed, you can use a dummy translation system which 
        translates nothing. To use gettext, you will need to have PHP gettext 
        module installed.</para>
      <para>Choosen translation system is set in client configuration file 
        <filename>client_conf/client.ini</filename>: <programlisting><![CDATA[### Internationalization ###

# I18n class
# use I18nDummy for no translation management
# use I18nGettext for gettext (will need PHP gettext module)
I18nClass = I18nDummy]]></programlisting> </para>
      <sect3 id="user.i18n.translations.config.linux">
        <title>Unix-like</title>
        <para>In Unix-like environments, file 
          <filename>/etc/locale.alias</filename> contains aliases to installed 
          locales. For each language used, a line must be present in this file. 
          The alias ('fr' in the example below) must point to a locale 
          installed on the system. <programlisting><![CDATA[...
fr    fr_CH.ISO-8859-1
...]]></programlisting>You will need to run <command>locale-gen</command> after 
          editing <filename>/etc/locale.alias</filename> to regenerate system's 
          locales. </para>
        <para> To install a locale on a Debian installation, use following 
          command with root priviledges: <screen><![CDATA[dpkg-reconfigure locales]]>
           </screen> If package locales has never been installed, you have to 
          install it before: <screen><![CDATA[apt-get install locales]]> 
          </screen> </para>
      </sect3>
      <sect3 id="user.i18n.translations.config.win32">
        <title>Win32</title>
        <para>TODO </para>
      </sect3>
    </sect2>
    <sect2 id="user.i18n.translations.template">
      <title>PO Templates</title>
      <para> Texts to be translated can be found in: <itemizedlist> <listitem> 
        <para> Smarty templates using <ulink 
        url="http://smarty.incutio.com/?page=SmartyGettext">SmartyGettext</ulink> 
        (see <xref linkend="user.template.i18n" />)</para> 
        </listitem><listitem> <para> Client plugins .ini files (for instance 
        map sizes) </para> </listitem> <listitem> <para> Server plugins .ini 
        files (for instance scales labels) </para> </listitem><listitem> <para> 
        Mapfile's .ini and .map (layers labels) </para> </listitem><listitem> 
        <para> Client and server PHP code (see <xref 
        linkend="dev.i18n.translations" />) </para> </listitem> </itemizedlist> 
        </para>
      <para> To generate PO templates, you will need to launch scripts on 
        server and on client. Templates are generated in directory 
        <filename>&lt;cartoweb_home&gt;/po</filename>. If translation files 
        (see <xref linkend="user.i18n.translations.translating" />) already 
        exist, a merge is done using <ulink 
        url="http://www.gnu.org/software/gettext/manual/html_chapter/gettext_6.html#SEC37"><command>msgmerge</command></ulink> 
        command. Follow these steps:<itemizedlist> <listitem> <para>generate 
        project and mapfile templates on server: <screen><![CDATA[cd <cartoweb_home>/scripts
./server2pot.php]]></screen>For each mapfile, two templates will be generated: 
        <filename>server-&lt;project_name&gt;.po</filename> and 
        <filename>server-&lt;project_name&gt;.&lt;mapfile_name&gt;.po</filename></para> 
        </listitem> <listitem> <para>generate project template on 
        client:<screen><![CDATA[cd <cartoweb_home>/scripts
./client2pot.php]]></screen>For each project, one template will be generated: 
        <filename>client-&lt;project_name&gt;.po</filename></para> </listitem> 
        </itemizedlist> </para>
    </sect2>
    <sect2 id="user.i18n.translations.translating">
      <title>Translating</title>
      <para> As for any gettext system, translating PO files can be done in 
        Emacs, in <ulink url="http://poedit.sourceforge.net/">Poedit</ulink> or 
        in any text editor. </para>
      <para> Translated PO files must be saved under name 
        <filename>&lt;template_name&gt;.&lt;lang&gt;.po</filename> ; where 
        &lt;lang&gt; is the 2-letters ISO language: en, fr, de, etc.. For 
        instance, the mapfile test of default project will have three PO files 
        for a complete french translation: 
        <itemizedlist><listitem><para><filename>server-default.po</filename></para></listitem> 
        <listitem><para><filename>server-default.test.po</filename></para></listitem> 
        <listitem><para><filename>client-default.po</filename></para></listitem></itemizedlist></para>
    </sect2>
    <sect2 id="user.i18n.translations.compiling">
      <title>Compiling PO to MO</title>
      <para> To compile all PO files to MO files (gettext's binary format), use 
        the following commands on client side. This should be done each time 
        configuration (client or server) is updated, and after each system 
        update. All languages are compiled at the same time. <screen><![CDATA[cd <cartoweb_home>/scripts
./po2mo.php]]></screen> Warning: When &cartoweb; is installed in SOAP mode, the 
        script uses PHP curl functions to retrieve PO files from server to 
        client. PHP curl module must be installed. </para>
    </sect2>
    <sect2 id="user.i18n.translations.example">
      <title>Example</title>
      <para> To translate texts in french for project testproject and map file 
        projectmap, follow these steps: <itemizedlist> <listitem> <para> On 
        server: <screen><![CDATA[cd <cartoweb_home>/scripts
./server2pot.php]]></screen> Copy 
        <filename>&lt;cartoweb_home&gt;/po/server-testproject.po</filename> to 
        <filename>&lt;cartoweb_home&gt;/po/server-testproject.fr.po</filename> 
        and 
        <filename>&lt;cartoweb_home&gt;/po/server-testproject.projectmap.po</filename> 
        to 
        <filename>&lt;cartoweb_home&gt;/po/server-testproject.projectmap.fr.po</filename>. 
        Edit french files with Poedit (or any editor). </para> </listitem> 
        <listitem> <para> On client: <screen><![CDATA[cd <cartoweb_home>/scripts
./client2pot.php]]></screen> Copy 
        <filename>&lt;cartoweb_home&gt;/po/client-testproject.po</filename> to 
        <filename>&lt;cartoweb_home&gt;/po/client-testproject.fr.po</filename>. 
        Edit french file with Poedit (or any editor). </para> <para> Merge and 
        compile files with the following commands: <screen><![CDATA[cd <cartoweb_home>/scripts
./po2mo.php]]></screen> Now you should have the file 
        <filename>testproject.projectmap.mo</filename> in directory 
        <filename>&lt;cartoweb_home&gt;/locale/fr/LC_MESSAGES</filename>. The 
        directory <filename>fr/LC_MESSAGES</filename> will be created if it 
        does not exist. </para> </listitem> </itemizedlist> </para>
    </sect2>
  </sect1>
  <sect1 id="user.i18n.encoding">
    <title>Character Set Encoding Configuration</title>
    <para> Character set configuration is needed when &cartoweb; strings may 
      include international characters with accents, or other special 
      characters. Two types of encodings must be set: 
      <itemizedlist><listitem><para>how files (map files, configuration files, 
      etc.) are encoded on server and on client. To set this encoding, add the 
      following line in <filename>server.ini</filename> and in 
      <filename>client.ini</filename>:<programlisting><![CDATA[
EncoderClass.config = <encoder_class>]]></programlisting> 
      </para></listitem><listitem><para>how &cartoweb; exports (including HTML 
      output) must be encoded. To set this encoding, add the following line in 
      <filename>client.ini</filename>:<programlisting><![CDATA[
EncoderClass.output = <encoder_class>]]></programlisting> 
      </para></listitem></itemizedlist> Where &lt;encoder_class&gt; is the 
      class used for encoding. Currently, following encoder classes are 
      implemented: <itemizedlist><listitem><para>EncoderISO: handles strings 
      coded in ISO-8859-1 </para></listitem><listitem><para>EncoderUTF: handles 
      strings coded in UTF-8</para></listitem></itemizedlist></para>
  </sect1>
</chapter>