<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % cartoweb SYSTEM "../cartoweb.ent" >
  %cartoweb;
]>

<!-- $Id$ -->

<chapter id="user.layers">
 <title>Layers</title>
  
 <sect1 id="user.layers.intro"> 
  <title>Introduction</title>
  <para>
   Geographical data are most often apprehended as thematic layers : you may
   have a layer "Rivers", a layer "Aerial view", a layer "Average income", just
   to cite a few examples. Now the basic purpose of any viewer is to make 
   these data available to users by allowing navigation within a layer as 
   well as comparison between layers. A way to organize the layers is thus 
   mandatory if an user-friendly application is to be developed. In &cartoweb;,
   the files that contain the configuration instructions for the layers are on
   the server-side, in the directory <filename>server_conf/&lt;myMap&gt;</filename>.
   Usually this directory is part of a project.
  </para>
  <para>
   &cartoweb; is based on the geographical engine Mapserver. The Mapserver
   documentation <ulink url="http://mapserver.gis.umn.edu/doc.html"> 
   http://mapserver.gis.umn.edu/doc.html</ulink> is an integral part of the
   &cartoweb; doc. To be concise, you have to know how to write a mapfile if
   you want to use &cartoweb;. So it doesn't come as a surprise that a mapfile,
   <filename>myMap.map</filename>, is included in the 
   <filename>&lt;myMap&gt;</filename> directory, together with its annexes 
   (typically a symbol file <filename>myMap.sym</filename>, a directory 
   <filename>etc</filename> for the required fonts, the graphic file used as
   keymap background, maybe also data files).
  </para>
  <para>
   We'll see that some functionalities of &cartoweb; require small changes of
   the mapfile content. But most of the configuration is done in the file 
   <filename>myMap.ini</filename>
  </para>
 </sect1>

 <sect1 id="user.layers.tree"> 
  <title>Hierarchy of layers and rendering</title>
  <para>
   Contrary to Mapserver itself, &cartoweb; supports an arbitrarily complex
   hierarchy of layers and different rendering options. The notion of 
   LayerGroup makes it possible.
  </para>
  <sect2 id="user.layers.tree.types">
   <title>Layers and LayerGroups</title>
   <para>
    There are two types of "layers-like objects" in <filename>myMap.ini</filename>
    : Layers and LayerGroups. They play fairly different roles and consequently 
    have different possible attributes. Layers have a 1-to-1 correspondance to
    Mapserver layers (as defined in the <filename>myMap.map</filename>), while
    LayerGroups, well, group together atomic Layers or other LayerGroups.
   </para>
  </sect2>

  <sect2 id="user.layers.tree.layers">
   <title>Layers options</title>
   <para>
   <indexterm><primary>layers</primary></indexterm>
    Here is the syntax for the various configuration parameters of a Layer.
   <itemizedlist>
    <listitem>
     <para>
       mapInfo.layers.layerId.className = Layer  : defines the object as a 
       Layer; layerId is a string that uniquely identifies the object. The 
       general rules of syntax for a .ini file must be respected in the 
       choice of the layerId (e.g. no '-' are allowed).
     </para>
    </listitem> 
    <listitem>
     <para>
       mapInfo.layers.layerId.msLayer = string  : name of the corresponding 
       Mapserver layer in the mapfile
     </para>
    </listitem>   
    <listitem>
     <para>
       mapInfo.layers.layerId.label = string  : caption of the layer in the 
       layer tree on the client; this is a 'raw' label, before any 
       internationalization. The i18n scripts automatically include this 
       label in the strings that can be translated.
     </para>
    </listitem> 
    <listitem>
     <para>
       mapInfo.layers.layerId.icon = filename  : filename of the static picto 
       that illustrates this Layer in the layer tree. The path is relative to
       <filename>myMap.ini</filename>.See also ??? for a
       description of the automatic legending process.
     </para>
    </listitem>   
    <listitem>
     <para>
       mapInfo.layers.layerId.link = url  : provides a link for the layer 
       (e.g. to some metadata); makes the caption in the tree clickable.
     </para>
    </listitem>    
    </itemizedlist>
   </para>
  </sect2>

  <sect2 id="user.layers.tree.layergroups">
   <title>Layergroups options</title>
   <para>
   <indexterm><primary>layergroups</primary></indexterm>
    Here is the syntax for the various configuration parameters of 
    LayerGroups. Note that a special LayerGroup with layerId=root must be 
    <indexterm><primary>root layergroup</primary></indexterm>
    present. Unsurprisingly, it is the root (top level) of the hierarchy. 
    It doesn't appear in the visible tree.
   <itemizedlist>
    <listitem>
     <para>
       mapInfo.layers.layerId.className = LayerGroup  : defines the object 
       as a LayerGroup; layerId is a string that uniquely identifies the 
       object. The general rules of syntax for a .ini file must be respected 
       in the choice of the layerId (e.g. no '-' are allowed).
     </para>
    </listitem> 
    <listitem>
     <para>
       mapInfo.layers.layerId.children = list of layerIds  : 
       comma-separated list of layerIds; these children may be Layers or 
       other LayerGroups.
     </para>
    </listitem> 
    <listitem>
     <para>
       mapInfo.layers.layerId.aggregate = true|false : if true, the 
       children objects are not listed in the tree and not individually 
       selectable. Default is false.
     </para>
    </listitem>  
    <listitem>
     <para>
       mapInfo.layers.layerId.label = string  : caption of the layer in the 
       layer tree on the client; this is a 'raw' label, before any 
       internationalization. The i18n scripts automatically include this 
       label in the strings that can be translated.
     </para>
    </listitem> 
    <listitem>
     <para>
       mapInfo.layers.layerId.icon = filename  : filename of the static picto 
       that illustrates this Layer in the layer tree. The path is relative to
       <filename>myMap.ini</filename>.See also ??? for a
       description of the automatic legending process.
     </para>
    </listitem>   
    <listitem>
     <para>
       mapInfo.layers.layerId.link = url  : provides a link for the layer 
       (e.g. to some metadata); makes the caption in the tree clickable.
     </para>
    </listitem> 
    <listitem>
     <para>
       mapInfo.layers.layerId.rendering = tree|block|radio|dropdown  : 
       indicates how to display the LayerGroup children.
       <itemizedlist>
        <listitem>
         <para>
          tree (default value): children layers are rendered below the 
          LayerGroup with an indentation. If children are not declared as 
          "frozen" or "hidden" they will be preceded by a checkbox input. 
          A node folding/unfolding link is displayed before the LayerGroup.
         </para>
        </listitem>
        <listitem>
         <para>
          radio: quite similar to the "tree" rendering with "radio" 
          buttons replacing checkboxes. Only one child layer can be 
          selected at a time.
         </para>
        </listitem>
        <listitem>
         <para>
          block: children layers are separated as blocks (separation medium
          depends on the template layout). Note that the rendering will be 
          applied to the children, not to the LayerGroup itself, 
          which is not displayed at all.
         </para>
        </listitem>
        <listitem>
         <para>
          dropdown: as for block rendering, the LayerGroup is not 
          displayed. Its children are simply rendered as an HTML 
          "simple select" options list. If the selected child layer 
          cannot be determined using posted or session-saved data, 
          first child (according to the mapInfo.layers.layerId.children 
          list order) is selected. If any, only the selected child 
          layer's own children are displayed under the dropdown list.
         </para>
        </listitem>
       </itemizedlist>
     </para>
    </listitem> 
    </itemizedlist>
   </para>
  </sect2>

  <sect2 id="user.layers.tree.initial">
   <title>Initial Mapstates</title>
   <para>
   <indexterm><primary>initial mapstate</primary></indexterm>
    Initial map states set the initial aspects of the layers selection 
    interface when starting using CartoClient : (un)folded nodes, selected 
    layers... Some of these properties are not modifiable in the layers 
    selection interface (hidden layers for instance) and thus stay 
    unchanged throughout the session
   </para>
   <para>
    Several initial map states can be created in <filename>myMap.ini
    </filename>, but at least one must be present. Each one is identified by a 
    unique initialMapStateId. The choice to activate one or another is done 
    client-side in <filename>client_conf/client.ini</filename>.
   </para>
  <para>
   Available properties and syntax for 
   layers in "initial map states" are:
   <itemizedlist>
    <listitem>
     <para>
      mapInfo.initialMapStates.initialMapStateId.layers.layerId.
      selected = true|false : if true, layer is initially selected.
     </para>
    </listitem>
    <listitem>
     <para>
       mapInfo.initialMapStates.initialMapStateId.layers.layerId.
       unfolded = true|false : if true, the layerGroup is represented as 
       an unfolded node (children layers are visible).
     </para>
    </listitem>
    <listitem>
     <para>
      mapInfo.initialMapStates.initialMapStateId.layers.layerId.
      hidden = true|false : if true, this layer and its children are not 
      shown in the layers list (but are still displayed on the map if 
      they're activated).
     </para>
    </listitem>
    <listitem>
     <para>
       mapInfo.initialMapStates.initialMapStateId.layers.layerId.
       frozen = true|false: if true, this layer (and its children as well)
       is listed in tree but without checkbox. Its selection status (defined by 
      "selected" property) thus cannot be changed.
     </para>
    </listitem>
   </itemizedlist>
   </para>
   <para>
    Example of Initial MapState : 
      <programlisting><![CDATA[mapInfo.initialMapStates.default.layers.polygon.selected = true
;mapInfo.initialMapStates.default.layers.polygon.unfolded = true 
mapInfo.initialMapStates.default.layers.polygon.hidden = true
...

mapInfo.initialMapStates.map25.layers.polygon.selected = true
mapInfo.initialMapStates.map25.layers.polygon.unfolded = true]]></programlisting>
   </para>
  </sect2>

 </sect1>

 <sect1 id="user.layers.mapfile">
  <title>MapFile layers configuration</title>
  <para>
  </para>
 </sect1>

 <sect1 id="user.layers.metadata"> 
  <title>Metadata in mapfiles and .ini file</title>
  <para>FIXME: is is the right place ?
  </para>
  <para>
   Metadata are (keyword, value) pairs which can be associated to a MapServer
   layer in the mapfile, or to a Layer or LayerGroup in the .ini configuration
   file. These metadata are used in several different contextes, such as layer
   specific configuration, security handling, ...
  </para>
  <sect2 id="user.layers.metadata.mapfile"> 
    <title>Metadata in mapfiles</title>
    <para>
    Specifying metadata in mapfiles is based on the standard MapServer syntax.
    For instance:
    <programlisting>
  LAYER 
    NAME "my_layer"
    [...]
    METADATA
    "exported_values" "security_view,security_edit"
    "security_view" "admin"
    "security_edit" "admin,editors"
    
      "id_attribute_string" "FID|string"
      "mask_transparency" "50"
      "mask_color" "255, 255, 0"
      "area_fixed_value" "10"
    END 
    [...]
  END    
    </programlisting>
    The metadata key <constant>exported_values</constant> is a bit special: It gives
    the list of metadata keys (coma separated), which will be transmitted to the 
    client. This is required for the metadata keys describing layer security for 
    instance, as they are used on the &cartoclient;.
    </para>
    </sect2>
  <sect2 id="user.layers.metadata.inifile"> 
    <title>Metadata in <filename>&lt;mapfile&gt;.ini</filename></title>
    <para>
     The .ini configuration file <filename>&lt;mapfile&gt;.ini</filename> may contains
     metadata (key, value) pairs, in addition to the mapfile. This is needed for 
     LayerGroup objects, as they have no counter part in the mapfile. For the layer
     metadata, the metadata specified in the [FIXME:add] have precendence over the 
     values from [FIXME:add].
    </para>
    <para>
      For each layer object in the .ini file, they may contains the following attribute:
   <itemizedlist>
    <listitem>
     <para>
    metadata.METADATA: a list of metadata which will be made available to the client. 
    These can also be set in the mapfile, for the layers. 
    Now this is used by the layers security mechanism
     </para>
    </listitem>      
    </itemizedlist>
      For instance:
      <programlisting>
mapInfo.layers.group_admin.className = LayerGroup
mapInfo.layers.group_admin.children = grid_defaulthilight
mapInfo.layers.group_admin.metadata.security_view = admin        
     </programlisting>
    </para>
  </sect2>
 </sect1>


 <sect1 id="user.layers.legend">
  <title>Layers legend</title>
  <para>
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
   Bla bla bla bla bla bla bla bla bla bla
  </para>
 </sect1>

</chapter>
